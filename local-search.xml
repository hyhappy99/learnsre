<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2022/06/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="计算机和linux系统"><a href="#计算机和linux系统" class="headerlink" title="计算机和linux系统"></a>计算机和linux系统</h1><h2 id="一-计算机系统"><a href="#一-计算机系统" class="headerlink" title="一. 计算机系统"></a>一. 计算机系统</h2><p>计算机（Computer）：俗称电脑，是一种能<font color=red> 接收 </font>和存储信息，并按照存储在其内部的程序对海量数据<br>进行自动、高速地处理，然后把处理结果输出的现代化智能电子设备.</p><h3 id="冯·诺依曼体系"><a href="#冯·诺依曼体系" class="headerlink" title="冯·诺依曼体系:"></a>冯·诺依曼体系:</h3><ul><li>数字计算机的数制采用二进制，bit 位, byte 字节  1 byte &#x3D;8 bit </li><li>计算机应该按照程序顺序执行</li><li>计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成</li></ul><h3 id="计算机的硬件五个组件"><a href="#计算机的硬件五个组件" class="headerlink" title="计算机的硬件五个组件"></a>计算机的硬件五个组件</h3><ul><li>控制器: 指挥系统 </li><li>运算器: 数学和逻辑运算 </li><li>存储器: 存储信息 </li><li>输入设备: 接收外部信息</li><li>输出设备: 输出计算机内部信息到外部设备</li></ul><h3 id="二进制和十进制转换"><a href="#二进制和十进制转换" class="headerlink" title="二进制和十进制转换"></a>二进制和十进制转换</h3><ul><li>2^0&#x3D;1&#x3D;1b</li><li>2^1&#x3D;2&#x3D;10b</li><li>2^3&#x3D;8&#x3D;1000b</li><li>2^4&#x3D;16&#x3D;10000b</li><li>2^5&#x3D;32&#x3D;100000b</li><li>2^6&#x3D;64&#x3D;1000000b</li><li>2^7&#x3D;128&#x3D;10000000b</li><li>2^8&#x3D;256&#x3D;100000000b</li><li>2^9&#x3D;512&#x3D;1000000000b</li><li>2^10&#x3D;1024&#x3D;10000000000b</li><li>2^11&#x3D;2048&#x3D;100000000000b</li><li>2^12&#x3D;4096&#x3D;1000000000000b</li></ul><p>计算器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">bc<br>2*3<br>6<br>obase=2<br><span class="hljs-comment">#默认十进制输入用二进制输出</span><br><br><span class="hljs-comment">#十进制转二进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=2;255&quot;</span> | bc<br>11111111<br><span class="hljs-comment">#八进制转十进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=10;ibase=8;377&quot;</span> | bc<br>255<br><span class="hljs-comment">#二进制转十进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=10;ibase=2;11111111&quot;</span> | bc<br>255 <br><span class="hljs-comment">#二进制转16进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=16;ibase=2;11111111&quot;</span> | bc<br>FF<br></code></pre></td></tr></table></figure><p>确定当前系统是32位或64位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">getconf LONG_BIT<br>64<br><span class="hljs-built_in">arch</span><br>X84_64<br></code></pre></td></tr></table></figure><p>计算公式： 内存带宽&#x3D;内存总线频率×数据总线位数&#x2F;8<br>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">单通道DDR（Double Data Rate双倍速率）内存带宽计算 <br>DDR4-4000：4000MHz*64bit/8=32000MB/S=32GB/S <br>DDR4-3600：3600MHz*64bit/8=28800MB/S<br>双通道：<br>DDR4-4000：4000MHz*64bit*2/8=64000MB/S<br></code></pre></td></tr></table></figure><p>服务器硬件—远程管理卡</p><pre><code class="hljs">    IPMI是智能型平台管理接口（Intelligent Platform Management Interface）的缩写，是管理基于 Intel结构的企业系统中所使用的外围设备采用的一种工业标准，该标准由英特尔、惠普、NEC、美国戴尔电脑和SuperMicro等公司制定。用户可以利用IPMI监视服务器的物理健康特征，如温度、电压、风扇工作状态、电源状态等。而且更为重要的是IPMI是一个开放的免费标准，用户无需为使用该标准而支付额外的费用。</code></pre><ul><li>Dell的iDRAC,</li><li>惠普的ILO,</li><li>浪潮的IPMI,</li><li>华为的IBMC,</li><li>华三的HDM</li></ul><p>并发和多线程</p><pre><code class="hljs">    CPU的速度超级快，不能老是让它闲着，要充分地压榨它！这里有两个强劲的理由：1. 人类需要多个程序“同时”运行，我们要把CPU的时间进行分片，让各个程序在CPU上轮转，造成一种多个程序同时在运行的假象，即并发。2. 当CPU遇到IO操作（硬盘，网络）时，不能坐在那里干等“几个月”甚至“几年”，在等待的时候，一定要切换，去执行别的程序。说起来简单，但是程序的切换需要保存程序执行的现场，以便以后恢复执行，于是需要一个数据结构来表示，这就是进程了。如果一个进程只有一个“执行流”， 如果进程去等待硬盘的操作，那这个程序就会被阻塞，无法响应用户的输入了，所以必须得有多个“执行流”，即多线程。</code></pre><p>缓存</p><pre><code class="hljs">    需要持久化的数据一定要保存到硬盘中，但是硬盘超级慢，支持不了大量的并发访问，那怎么办呢？可以把最常访问的热点数据放到CPU的缓存中，其实CPU也确实就是这么做的，但是CPU的L1, L2, L3级缓存实在是太小，根本满足不了需求。于是只好退而求其次，把热点数据放到速度稍慢的内存中，于是应用程序的缓存就出现了。缓存虽然是解决了问题，但是也带来了更多的问题，例如：缓存数据和数据库数据怎么保持一致性？缓存如果崩溃了该怎么处理？数据在一台机器的内存放不下了，要分布到多个机器上，怎么搞分布式啊，用什么算法？.....</code></pre><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>OS</p><pre><code class="hljs">OS: Operating System 操作系统，通用目的的软件程序</code></pre><p>用户 $\Leftrightarrow$ 应用软件 $\Leftrightarrow$ 操作系统 $\Leftrightarrow$ 硬件</p><p>主要功能：</p><ul><li>硬件驱动 </li><li>进程管理 </li><li>内存管理 </li><li>网络管理 </li><li>安全管理 </li><li>文件管理</li></ul><p>接口</p><p>操作系统通过接口的方式，建立了用户与计算机硬件的沟通方式。用户通过调用操作系统的接口来使用计算机的各种计算服务。</p><ul><li><p>命令行：实际是一个叫shell的终端程序提供的功能，该程序底层的实质还是调用一些操作系统提供的函数</p></li><li><p>窗口界面：通过图形窗口程序接收来自操作系统的消息，比如:鼠标、键盘动作，进而做出一些响应</p><p>  API：Application Programming Interface，应用程序编程接口，API定义了源代码和库之间的接口，因此同样的源代码可以在支持这个API的任何系统中编译</p><p>  API 应用程序接口是一些预先定义的接口（如函数、HTTP接口），或指软件系统不同组成部分衔接的约定。用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程，而又无需访问源码，或理解内部工作机制的细节。</p></li></ul><p>系统调用system call和函数库 Library function</p><h2 id="各种操作系统"><a href="#各种操作系统" class="headerlink" title="各种操作系统"></a>各种操作系统</h2><p>操作系统演变</p><ul><li>单用户系统：一次只能支持一个用户程序的运行。向用户提供联机交互式的工作环境，如：DOS </li><li>批处理系统：用户将一批作业提交给操作系统后就不再交互，由操作系统控制自动运行，提高系统运行效率</li><li>多道程序系统：可以运行多个程序,由程序控制 CPU 处理顺序</li><li>分时系统：操作系统控制 CPU 处理顺序，多个人共用一台计算机,提高系统利用率和系统安全 </li><li>个人计算机：每人用户对应一个系统，廉价，方便，易用</li><li>分布式计算：每个用户对应多个系统，云计算，大数据处理</li></ul><p>服务器三大操作系统</p><ul><li>Multics 分时多任务操作系统 由CTSS分时系统而来 GE-645</li><li>Unix 非复用信息和科学计算机服务，一种多用户，多进程的计算机操作系统<ul><li>System: Bell Lab<ul><li>AIX （IBM） </li><li>Solaris (SUN) </li><li>HP-UX (HP)</li></ul></li><li>BSD: （BSRG）Berkeley System Distribution<ul><li>NetBSD </li><li>OpenBSD</li><li>FreeBSD</li></ul></li></ul></li><li>GNU&#x2F;Linux</li><li>Windows</li></ul><h2 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h2><ul><li>GNU：GNU is Not Unix</li><li>GPL：GNU General Public License</li><li>自由软件基金会：Free Software Foundation</li><li>开源 Open Source</li></ul><p>范例: 查看软件的发行许可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -qi openssh<br>rpm -qi kernel<br></code></pre></td></tr></table></figure><p>Linux</p><pre><code class="hljs">Linux内核+ GNU工具=Linux/GNU</code></pre><p>Linux的内核版本组成 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>3.10.0-693.2.2.el7.x86_64<br></code></pre></td></tr></table></figure><ul><li>主版本号 3</li><li>次版本号 10</li><li>末版本号 0</li><li>打包版本号 693</li><li>厂商版本 el7</li></ul><p>Linux 发行版</p><ul><li>slackware：SUSE Linux Enterprise Server (SLES) , OpenSuse桌面 </li><li>debian:   ubuntu，deepin（深度），mint</li><li>redhat：  <ul><li>RHEL: RedHat Enterprise Linux, 每18个月发行一个新版本</li><li>CentOS：  Community Enterprise Operating System 兼容RHEL的格式</li><li>中标麒麟：中标软件</li><li>Fedora：每6个月发行一个新版本</li></ul></li><li>Alpine：  一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musllibc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，只有5M左右大小</li><li>ArchLinux：轻量简洁，遵循K.I.S.S.原则（ keep it simple and stupid ），Manjaro </li><li>Gentoo：极致性能，不提供传统意义的安装程序，下载源代码在本机上编译安装软件 </li><li>LFS：Linux From scratch 自制Linux，只是一个说明书</li><li>Android：kernel+busybox（工具集）+java虚拟机</li></ul><p>Rocky Linux<br>rockylinux.org</p><h3 id="UNIX哲学思想"><a href="#UNIX哲学思想" class="headerlink" title="UNIX哲学思想"></a>UNIX哲学思想</h3><ul><li>一切都是一个文件（包括硬件） </li><li>小型，单一用途的程序</li><li>链接程序，共同完成复杂的任务（shell脚本) </li><li>避免令人困惑的用户界面</li><li>配置数据存储在文本中</li></ul><p>用户空间：User space<br>用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃，内核也不受影响<br>只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（ system call），才能向内核发出指<br>令<br>内核空间：Kernel space<br>是 Linux 内核的运行空间<br>可以执行任意命令，调用系统的一切资源</p><hr><h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><h2 id="1-终端类型"><a href="#1-终端类型" class="headerlink" title="1. 终端类型"></a>1. 终端类型</h2><ul><li>&#x2F;dev&#x2F;console控制台</li><li>&#x2F;dev&#x2F;ttyS# 串行终端</li><li>&#x2F;dev&#x2F;tty# 虚拟终端 ，ctrl+alt+F1~F6</li><li>&#x2F;dev&#x2F;pts&#x2F;# 伪终端 ssh远程连接</li><li>startx,xwindows 图形终端 ctrl+alt+F7 (centos 6)</li></ul><p>[^ctrl+alt+F7]: centos 6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前终端设备</span><br><span class="hljs-built_in">tty</span><br>/dev/pts/0<br></code></pre></td></tr></table></figure><h2 id="交互式接口"><a href="#交互式接口" class="headerlink" title="交互式接口"></a>交互式接口</h2><ul><li>GUI：Graphic User Interface X protocol, window manager, desktop <ul><li>GNOME (C, 图形库gtk)</li><li>KDE   (C++,图形库qt)</li><li>XFCE  (轻量级桌面)</li></ul></li><li>CLI：Command Line Interface <ul><li>shell程序:<ul><li>Shell 是Linux系统的用户界面，提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行.</li><li>shell也被称为LINUX的命令解释器（command interpreter），Shell 本身是一个程序。将用户输入的命令行拆解为”命令名“与”参数“。接着，根据命令名找到对应要执行的程序，对被执行的程序进行初始<br>  化，然后将刚才解析出来的参数传给该程序并执行.</li></ul></li></ul></li></ul><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>Linux的时钟</p><ul><li>系统时钟： 由linux内核根据CPU的工作频率计算得出的</li><li>硬件时钟： 主板<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> +%s<br>1654605973<br><span class="hljs-comment">#当前时间戳</span><br><span class="hljs-built_in">date</span> -d @`<span class="hljs-built_in">date</span> +%s`<br>2022年 06月 07日 星期二 20:47:21 CST<br><span class="hljs-comment">#根据时间戳计算时间</span><br><span class="hljs-built_in">date</span> -d @1654605973 +%F_%T<br>2022-06-07_20:46:13<br><span class="hljs-comment">#输出的格式日期—时间</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2022-06-07&quot;</span> +%s<br>1654531200<br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2022-06-07 20:46:13&quot;</span> +%s<br>1654605973<br><span class="hljs-comment">#日期转换成时间戳</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo常用命令</title>
    <link href="/2022/06/07/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/07/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><h3 id="Create-a-new-page"><a href="#Create-a-new-page" class="headerlink" title="Create a new page"></a>Create a new page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 文章<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>5文本处理工具和正则表达式</title>
    <link href="/2022/06/07/5%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/06/07/5%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>4Linux用户组和权限管理</title>
    <link href="/2022/06/07/4Linux%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/2022/06/07/4Linux%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>3Linux文件管理和IO重定向</title>
    <link href="/2022/06/07/3Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%92%8CIO%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2022/06/07/3Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%92%8CIO%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2Linux基础入门和帮助</title>
    <link href="/2022/06/07/2Linux%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%92%8C%E5%B8%AE%E5%8A%A9/"/>
    <url>/2022/06/07/2Linux%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%92%8C%E5%B8%AE%E5%8A%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础入门和帮助"><a href="#Linux基础入门和帮助" class="headerlink" title="Linux基础入门和帮助"></a>Linux基础入门和帮助</h1><h2 id="1-终端类型"><a href="#1-终端类型" class="headerlink" title="1. 终端类型"></a>1. 终端类型</h2><ul><li>&#x2F;dev&#x2F;console控制台</li><li>&#x2F;dev&#x2F;ttyS# 串行终端</li><li>&#x2F;dev&#x2F;tty# 虚拟终端 ，ctrl+alt+F1~F6</li><li>&#x2F;dev&#x2F;pts&#x2F;# 伪终端 ssh远程连接</li><li>startx,xwindows 图形终端 ctrl+alt+F7 (centos 6)</li></ul><p>[^ctrl+alt+F7]: centos 6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前终端设备</span><br><span class="hljs-built_in">tty</span><br>/dev/pts/0<br></code></pre></td></tr></table></figure><h2 id="2-交互式接口"><a href="#2-交互式接口" class="headerlink" title="2 交互式接口"></a>2 交互式接口</h2><ul><li>GUI：Graphic User Interface X protocol, window manager, desktop <ul><li>GNOME (C, 图形库gtk)</li><li>KDE   (C++,图形库qt)</li><li>XFCE  (轻量级桌面)</li></ul></li><li>CLI：Command Line Interface <ul><li>shell程序:</li></ul></li></ul><h2 id="3-shell"><a href="#3-shell" class="headerlink" title="3 shell"></a>3 shell</h2><pre><code class="hljs">Shell 是Linux系统的用户界面，提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行.shell也被称为LINUX的命令解释器（command interpreter），Shell 本身是一个程序。将用户输入的命令行拆解为”命令名“与”参数“。接着，根据命令名找到对应要执行的程序，对被执行的程序进行初始化，然后将刚才解析出来的参数传给该程序并执行.</code></pre><ul><li>sh：Steve Bourne </li><li>bash：Bourne-Again Shell，GPL，CentOS  和 Ubuntu 默认使用 </li><li>csh：c shell , C 语言风格</li><li>tcsh</li><li>ksh ：Korn Shell, AIX 默认 shell </li><li>zsh： MacOS默认shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br><span class="hljs-built_in">cat</span> /etc/shells<br>hostnamectl set-hostname bj-yz-k8s-node1-100-10.magedu.local<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PS1</span><br>PS1=<span class="hljs-string">&quot;\[\e[1;32m\][\t \[\e[1;33m\]\u\[\e[35m\]@\h\[\e[1;31m\] \W\[\e[1;32m\]]\[\e[0m\]\\$&quot;</span><br><span class="hljs-built_in">tail</span> -1 .bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PS1=&quot;\[\e[1;32m\][\t \[\e[1;33m\]\u\[\e[35m\]@\h\[\e[1;31m\] \W\[\e[1;32m\]]\[\e[0m\]\\$&quot;&#x27;</span>&gt; /etc/profile.d/env.sh<br></code></pre></td></tr></table></figure><h2 id="4-执行命令"><a href="#4-执行命令" class="headerlink" title="4 执行命令"></a>4 执行命令</h2><p>执行命令过程</p><p>输入命令后回车，提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分<br>配资源将其运行起</p><ul><li>内部命令：由shell自带的，而且通过某命令形式提供, ,用户登录后自动加载并常驻内存中 </li><li>外部命令：在文件系统路径下有对应的可执行程序文件,当执行命令时才从磁盘加载至内存中,执行完毕后从内存中删除</li></ul><p>范例: 查看是否存在对应内部和外部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> -a <span class="hljs-built_in">echo</span><br><span class="hljs-built_in">echo</span> is a shell <span class="hljs-built_in">builtin</span><br><span class="hljs-built_in">echo</span> is /usr/bin/echo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span><br><span class="hljs-built_in">unalias</span><br><span class="hljs-built_in">unalias</span> -a  <span class="hljs-comment">#取消所有别名</span><br></code></pre></td></tr></table></figure><ul><li>仅对当前用户：~&#x2F;.bashrc </li><li>对所有用户有效：&#x2F;etc&#x2F;bashrc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /path/to/config_file <br>.  /path/to/config_file<br></code></pre></td></tr></table></figure><h2 id="5-命令格式"><a href="#5-命令格式" class="headerlink" title="5 命令格式"></a>5 命令格式</h2><p> 选项：用于启用或关闭命令的某个或某些功能</p><ul><li>短选项：UNIX 风格选项，-c  例如：-l, -h</li><li>长选项：GNU风格选项，–word 例如：–all, –human </li><li>BSD风格选项：  一个字母，例如：a，使用相对较少</li></ul><p>参数：命令的作用对象，比如:文件名，用户名等</p><p>注意：</p><ul><li>多个选项以及多参数和命令之间使用空白字符分隔 </li><li>取消和结束命令执行：Ctrl+c，Ctrl+d</li><li>多个命令可以用 “;” 符号分开 </li><li>一个命令可以用\分成多行</li></ul><h2 id="6-常用命令"><a href="#6-常用命令" class="headerlink" title="6 常用命令"></a>6 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">lscpu<br><span class="hljs-built_in">cat</span> /proc/cpuinfo<br>free<br><span class="hljs-built_in">cat</span> /proc/meminfo<br>lsblk<br><span class="hljs-built_in">cat</span> /proc/partitions<br><span class="hljs-built_in">arch</span><br><span class="hljs-built_in">uname</span> -r<br><span class="hljs-built_in">cat</span> /etc/redhat-release<br><span class="hljs-built_in">cat</span> /etc/os-release<br>lsb_release -a<br><span class="hljs-built_in">cat</span> /etc/issue<br>lsb_release -is<br>lsb_release -cs<br>lsb_release -rs<br></code></pre></td></tr></table></figure><h2 id="7-日期和时间"><a href="#7-日期和时间" class="headerlink" title="7 日期和时间"></a>7 日期和时间</h2><h3 id="7-1-Linux的时钟"><a href="#7-1-Linux的时钟" class="headerlink" title="7.1 Linux的时钟"></a>7.1 Linux的时钟</h3><ul><li>系统时钟： 由linux内核根据CPU的工作频率计算得出的</li><li>硬件时钟： 主板</li></ul><p>相关命令</p><ul><li>date 显示和设置系统时间</li><li>clock，hwclock: 显示硬件时钟<ul><li>-s, –hctosys #以硬件时钟为准，校正系统时钟</li><li>-w, –systohc #以系统时钟为准，校正硬件时钟</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">ll /usr/sbin/clock<br>lrwxrwxrwx 1 root root 7 3月   8 2020 /usr/sbin/clock -&gt; hwclock<br><br>timedatectl list-timezones<br>timedatectl set-timezone Asia/Shanghai<br>timedatectl  status<br> ll /etc/localtime<br>lrwxrwxrwx 1 root root 33 10月 15 2017 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Shanghai<br><span class="hljs-built_in">cat</span> /etc/timezone <br>Asia/Shanghai<br></code></pre></td></tr></table></figure><h3 id="7-2-时间戳"><a href="#7-2-时间戳" class="headerlink" title="7.2 时间戳"></a>7.2 时间戳</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> +%s<br>1654605973<br><span class="hljs-comment">#当前时间戳</span><br><span class="hljs-built_in">date</span> -d @`<span class="hljs-built_in">date</span> +%s`<br>2022年 06月 07日 星期二 20:47:21 CST<br><span class="hljs-comment">#根据时间戳计算时间</span><br><span class="hljs-built_in">date</span> -d @1654605973 +%F_%T<br>2022-06-07_20:46:13<br><span class="hljs-comment">#输出的格式日期—时间</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2022-06-07&quot;</span> +%s<br>1654531200<br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2022-06-07 20:46:13&quot;</span> +%s<br>1654605973<br><span class="hljs-comment">#日期转换成时间戳</span><br></code></pre></td></tr></table></figure><h2 id="8-日历"><a href="#8-日历" class="headerlink" title="8 日历"></a>8 日历</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cal –y<br>cal 9 1752<br></code></pre></td></tr></table></figure><h2 id="9-关机重启"><a href="#9-关机重启" class="headerlink" title="9 关机重启"></a>9 关机重启</h2><p>关机：</p><ul><li>halt </li><li>poweroﬀ</li></ul><p>重启：</p><ul><li><p>reboot</p><ul><li>-f: 强制，不调用shutdown </li><li>-p: 切断电源</li></ul></li><li><p>ctrl+alt+delete 三个键</p></li></ul><h2 id="用户登录信息查看命令"><a href="#用户登录信息查看命令" class="headerlink" title="用户登录信息查看命令"></a>用户登录信息查看命令</h2><ul><li>whoami: 显示当前登录有效用户</li><li>who: 系统当前所有的登录会话</li><li>w: 系统当前所有的登录会话及所做的操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/motd <span class="hljs-comment">#登录后显示提示</span><br></code></pre></td></tr></table></figure><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命<br>令。用户与计算机的这种临时的交互，称为一次”会话”（session）</p><p>一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次<br>登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消<br>失了。为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到<br>以后需要的时候，再让会话”绑定”其他窗口<br>终端复用器软件就是会话与窗口的”解绑”工具，将它们彻底分离。</p><ul><li>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li><li>（2）  它可以让新窗口”接入”已经存在的会话。</li><li>（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li><li>（4）它还支持窗口任意的垂直和水平拆分。</li></ul><p>的终端复用器还有Screen，Tmux</p><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#CentOS7 安装screen</span><br>[root@centos7 ~]<span class="hljs-comment">#yum -y install screen </span><br><span class="hljs-comment">#CentOS8 安装screen</span><br>[root@centos8 ~]<span class="hljs-comment">#dnf -y install epel-release </span><br>[root@centos8 ~]<span class="hljs-comment">#dnf -y install screen</span><br><br><span class="hljs-comment">#screen命令常见用法： </span><br><span class="hljs-comment">#创建新screen会话 </span><br>screen –S [SESSION] <br><span class="hljs-comment">#加入screen会话</span><br>screen –x [SESSION]<br><span class="hljs-comment">#退出并关闭screen会话</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-comment">#剥离当前screen会话</span><br>Ctrl+a,d<br><span class="hljs-comment">#显示所有已经打开的screen会话</span><br>screen -<span class="hljs-built_in">ls</span><br><span class="hljs-comment">#恢复某screen会话</span><br>screen -r [SESSION]<br></code></pre></td></tr></table></figure><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>Tmux 是一个终端复用器（terminal multiplexer），类似 screen，但是更易用，也更强大<br>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离，功能如下</p><ul><li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。 </li><li>它可以让新窗口”接入”已经存在的会话。</li><li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。 </li><li>它还支持窗口任意的垂直和水平拆分</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install tmux<br>[root@centos8 ~]<span class="hljs-comment">#tmux </span><br>[root@centos8 ~]<span class="hljs-comment">#exit </span><br><span class="hljs-built_in">logout</span><br></code></pre></td></tr></table></figure><p>接入会话<br>tmux attach 命令用于重新接入某个已存在的会话。</p><pre><code class="hljs">tmux attach -t &lt;session-name&gt;</code></pre><p>范例：</p><pre><code class="hljs">tmux attach -t 0</code></pre><p>杀死会话<br>tmux kill-session命令用于杀死某个会话。</p><pre><code class="hljs">tmux kill-session -t &lt;session-name&gt;</code></pre><p>切换会话<br>tmux switch命令用于切换会话</p><pre><code class="hljs">tmux switch -t &lt;session-name&gt;</code></pre><p>可以将窗口分成多个窗格（pane），每个窗格运行不同的命令<br>上下分窗格</p><pre><code class="hljs">tmux split-window ctrl+b,&quot;</code></pre><p>左右分窗格</p><pre><code class="hljs">tmux split-window -h ctrl+b,%</code></pre><p>窗格快捷键</p><ul><li>Ctrl+b %：划分左右两个窗格</li><li>Ctrl+b “：划分上下两个窗格</li><li>Ctrl+b <arrow key>：光标切换到其他窗格。<arrow key>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓</li><li>Ctrl+b ;：光标切换到上一个窗格</li><li>Ctrl+b o：光标切换到下一个窗格。</li><li>Ctrl+b {：当前窗格左移</li><li>Ctrl+b }：当前窗格右移</li><li>Ctrl+b Ctrl+o：当前窗格上移</li><li>Ctrl+b Alt+o：当前窗格下移</li><li>Ctrl+b x：关闭当前窗格</li><li>Ctrl+b !：将当前窗格拆分为一个独立窗口</li><li>Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小</li><li>Ctrl+b Ctrl+<arrow key>：按箭头方向调整窗格大小</li><li>Ctrl+b q：显示窗格编号</li></ul><h2 id="输出信息-echo"><a href="#输出信息-echo" class="headerlink" title="输出信息 echo"></a>输出信息 echo</h2><p>echo 命令可以将后面跟的字符进行输出<br>功能：显示字符，echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开, 并在最后加上换行号</p><p>echo [-neE][字符串]</p><ul><li>-E  （默认）不支持 \ 解释功能</li><li>-n  不自动换行</li><li>-e  启用 \ 字符的解释功能</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VAR_NAME</span>”    #用变量值替换，弱引用 </span><br><span class="hljs-string">echo &#x27;<span class="hljs-variable">$VAR_NAME</span>’    #变量不会替换，强引用</span><br><span class="hljs-string"></span><br><span class="hljs-string">[root@centos8 ~]#echo -e &#x27;a\x0Ab&#x27;</span><br><span class="hljs-string">a</span><br><span class="hljs-string">b</span><br><span class="hljs-string">[root@centos8 ~]#echo -e &#x27;\033[43;31;1;5mmagedu\e[0m&#x27; </span><br><span class="hljs-string">magedu</span><br><span class="hljs-string">[root@centos8 ~]#echo -e &#x27;\x57\x41\x4E\x47&#x27; </span><br><span class="hljs-string">WANG</span><br><span class="hljs-string">[root@centos8 ~]#echo \$PATH </span><br><span class="hljs-string"><span class="hljs-variable">$PATH</span></span><br><span class="hljs-string">[root@centos8 ~]#echo \ </span><br><span class="hljs-string">[root@centos8 ~]#echo \\ </span><br><span class="hljs-string">\</span><br><span class="hljs-string">[root@centos8 ~]#echo \\\ </span><br><span class="hljs-string">&gt;</span><br><span class="hljs-string">[root@centos8 ~]#echo \\\\ </span><br><span class="hljs-string">\\</span><br><span class="hljs-string">[root@centos8 ~]#echo &quot;</span><span class="hljs-variable">$PATH</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin </span><br><span class="hljs-string">[root@centos8 ~]#echo &#x27;<span class="hljs-variable">$PATH</span>&#x27;</span><br><span class="hljs-string"><span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><h2 id="字符集和编码及语言环境"><a href="#字符集和编码及语言环境" class="headerlink" title="字符集和编码及语言环境"></a>字符集和编码及语言环境</h2><p>许多场合下，字符集与编码这两个概念常被混为一谈，但两者是有差别的。字符集与字符集编码是两个<br>不同层面的概念<br>charset是character set的简写，即字符集，即二进制和字符的对应关系，不关注最终的存储形式<br>encoding是charset encoding的简写，即字符集编码，简称编码，实现如何将字符转化为实际的二进制<br>进行存储或相反，编码决定了空间的使用的大小</p><h2 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LANG</span> <br>en_US.UTF-8<br>LANG=zh_CN.UTF-8<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LANG</span><br>zh_CN.UTF-8<br>[root@rocky8 ~]<span class="hljs-comment">#localectl status </span><br>   System Locale: LANG=en_US.UTF-8 <br>       VC Keymap: us<br>      X11 Layout: us <br>[root@rocky8 ~]<span class="hljs-comment">#echo $LANG </span><br>en_US.UTF-8<br><br></code></pre></td></tr></table></figure><p>命令行扩展：&#96;&#96; 和 $()</p><p>括号扩展：{ }</p><p>获得帮助</p><p>层次的帮助<br>whatis<br>command –help<br>man<br>&#x2F;usr&#x2F;share&#x2F;doc&#x2F;<br>Red Hat documentation 、Ubuntu documentation<br>软件项目网站<br>其它网站<br>搜索</p><p>whatis<br>whatis 使用数据库来显示命令的简短描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#CentOS 7 版本以后</span><br>mandb<br><span class="hljs-comment">#CentOS 6 版本之前</span><br>makewhatis<br></code></pre></td></tr></table></figure><p>内部命令帮助</p><ul><li>help COMMAND </li><li>man bash</li></ul><p>外部命令及软件帮助</p><ul><li>COMMAND –help  或  COMMAND -h </li><li>使用 man 手册(manual)： man COMMAND </li><li>信息页：info COMMAND</li><li>程序自身的帮助文档：README、INSTALL、ChangeLog </li><li>程序官方文档</li><li>相关网站，如：技术论坛 </li><li>搜索引擎</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1计算机基础和Linux安装</title>
    <link href="/2022/06/07/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%92%8CLinux%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/07/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%92%8CLinux%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机和linux系统"><a href="#计算机和linux系统" class="headerlink" title="计算机和linux系统"></a>计算机和linux系统</h1><h2 id="1-计算机系统"><a href="#1-计算机系统" class="headerlink" title="1. 计算机系统"></a>1. 计算机系统</h2><p>计算机（Computer）：俗称电脑，是一种能<font color=red> 接收 </font>和存储信息，并按照存储在其内部的程序对海量数据<br>进行自动、高速地处理，然后把处理结果输出的现代化智能电子设备.</p><h3 id="1-1-冯·诺依曼体系"><a href="#1-1-冯·诺依曼体系" class="headerlink" title="1.1 冯·诺依曼体系:"></a>1.1 冯·诺依曼体系:</h3><ul><li>数字计算机的数制采用二进制，bit 位, byte 字节  1 byte &#x3D;8 bit </li><li>计算机应该按照程序顺序执行</li><li>计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成</li></ul><h3 id="1-2-计算机的硬件五个组件"><a href="#1-2-计算机的硬件五个组件" class="headerlink" title="1.2 计算机的硬件五个组件"></a>1.2 计算机的硬件五个组件</h3><ul><li>控制器: 指挥系统 </li><li>运算器: 数学和逻辑运算 </li><li>存储器: 存储信息 </li><li>输入设备: 接收外部信息</li><li>输出设备: 输出计算机内部信息到外部设备</li></ul><h3 id="1-3-二进制和十进制转换"><a href="#1-3-二进制和十进制转换" class="headerlink" title="1.3 二进制和十进制转换"></a>1.3 二进制和十进制转换</h3><ul><li>2^0&#x3D;1&#x3D;1b</li><li>2^1&#x3D;2&#x3D;10b</li><li>2^3&#x3D;8&#x3D;1000b</li><li>2^4&#x3D;16&#x3D;10000b</li><li>2^5&#x3D;32&#x3D;100000b</li><li>2^6&#x3D;64&#x3D;1000000b</li><li>2^7&#x3D;128&#x3D;10000000b</li><li>2^8&#x3D;256&#x3D;100000000b</li><li>2^9&#x3D;512&#x3D;1000000000b</li><li>2^10&#x3D;1024&#x3D;10000000000b</li><li>2^11&#x3D;2048&#x3D;100000000000b</li><li>2^12&#x3D;4096&#x3D;1000000000000b</li></ul><p>计算器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">bc<br>2*3<br>6<br>obase=2<br><span class="hljs-comment">#默认十进制输入用二进制输出</span><br><br><span class="hljs-comment">#十进制转二进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=2;255&quot;</span> | bc<br>11111111<br><span class="hljs-comment">#八进制转十进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=10;ibase=8;377&quot;</span> | bc<br>255<br><span class="hljs-comment">#二进制转十进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=10;ibase=2;11111111&quot;</span> | bc<br>255 <br><span class="hljs-comment">#二进制转16进制：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;obase=16;ibase=2;11111111&quot;</span> | bc<br>FF<br></code></pre></td></tr></table></figure><p>确定当前系统是32位或64位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">getconf LONG_BIT<br>64<br><span class="hljs-built_in">arch</span><br>X84_64<br></code></pre></td></tr></table></figure><p>计算公式： 内存带宽&#x3D;内存总线频率×数据总线位数&#x2F;8<br>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">单通道DDR（Double Data Rate双倍速率）内存带宽计算 <br>DDR4-4000：4000MHz*64bit/8=32000MB/S=32GB/S <br>DDR4-3600：3600MHz*64bit/8=28800MB/S<br>双通道：<br>DDR4-4000：4000MHz*64bit*2/8=64000MB/S<br></code></pre></td></tr></table></figure><h3 id="1-4-服务器硬件—远程管理卡"><a href="#1-4-服务器硬件—远程管理卡" class="headerlink" title="1.4 服务器硬件—远程管理卡"></a>1.4 服务器硬件—远程管理卡</h3><pre><code class="hljs">    IPMI是智能型平台管理接口（Intelligent Platform Management Interface）的缩写，是管理基于 Intel结构的企业系统中所使用的外围设备采用的一种工业标准，该标准由英特尔、惠普、NEC、美国戴尔电脑和SuperMicro等公司制定。用户可以利用IPMI监视服务器的物理健康特征，如温度、电压、风扇工作状态、电源状态等。而且更为重要的是IPMI是一个开放的免费标准，用户无需为使用该标准而支付额外的费用。</code></pre><ul><li>Dell的iDRAC,</li><li>惠普的ILO,</li><li>浪潮的IPMI,</li><li>华为的IBMC,</li><li>华三的HDM</li></ul><h3 id="1-5-并发和多线程"><a href="#1-5-并发和多线程" class="headerlink" title="1.5 并发和多线程"></a>1.5 并发和多线程</h3><pre><code class="hljs">    CPU的速度超级快，不能老是让它闲着，要充分地压榨它！这里有两个强劲的理由：1. 人类需要多个程序“同时”运行，我们要把CPU的时间进行分片，让各个程序在CPU上轮转，造成一种多个程序同时在运行的假象，即并发。2. 当CPU遇到IO操作（硬盘，网络）时，不能坐在那里干等“几个月”甚至“几年”，在等待的时候，一定要切换，去执行别的程序。说起来简单，但是程序的切换需要保存程序执行的现场，以便以后恢复执行，于是需要一个数据结构来表示，这就是进程了。如果一个进程只有一个“执行流”， 如果进程去等待硬盘的操作，那这个程序就会被阻塞，无法响应用户的输入了，所以必须得有多个“执行流”，即多线程。</code></pre><p>缓存</p><pre><code class="hljs">    需要持久化的数据一定要保存到硬盘中，但是硬盘超级慢，支持不了大量的并发访问，那怎么办呢？可以把最常访问的热点数据放到CPU的缓存中，其实CPU也确实就是这么做的，但是CPU的L1, L2, L3级缓存实在是太小，根本满足不了需求。于是只好退而求其次，把热点数据放到速度稍慢的内存中，于是应用程序的缓存就出现了。缓存虽然是解决了问题，但是也带来了更多的问题，例如：缓存数据和数据库数据怎么保持一致性？缓存如果崩溃了该怎么处理？数据在一台机器的内存放不下了，要分布到多个机器上，怎么搞分布式啊，用什么算法？.....</code></pre><h2 id="2-linux"><a href="#2-linux" class="headerlink" title="2. linux"></a>2. linux</h2><h3 id="2-1-OS"><a href="#2-1-OS" class="headerlink" title="2.1 OS"></a>2.1 OS</h3><pre><code class="hljs">OS: Operating System 操作系统，通用目的的软件程序</code></pre><p>用户 $\Leftrightarrow$ 应用软件 $\Leftrightarrow$ 操作系统 $\Leftrightarrow$ 硬件</p><p>主要功能：</p><ul><li>硬件驱动 </li><li>进程管理 </li><li>内存管理 </li><li>网络管理 </li><li>安全管理 </li><li>文件管理</li></ul><p>用户空间：User space</p><p>用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃，内核也不受影响只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（ system call），才能向内核发出指令</p><p>内核空间：Kernel space</p><p>是Linux内核的运行空间可以执行任意命令，调用系统的一切资源</p><h3 id="2-2-接口"><a href="#2-2-接口" class="headerlink" title="2.2 接口"></a>2.2 接口</h3><p>操作系统通过接口的方式，建立了用户与计算机硬件的沟通方式。用户通过调用操作系统的接口来使用计算机的各种计算服务。</p><ul><li><p>命令行：实际是一个叫shell的终端程序提供的功能，该程序底层的实质还是调用一些操作系统提供的函数</p></li><li><p>窗口界面：通过图形窗口程序接收来自操作系统的消息，比如:鼠标、键盘动作，进而做出一些响应</p><p>  API：Application Programming Interface，应用程序编程接口，API定义了源代码和库之间的接口，因此同样的源代码可以在支持这个API的任何系统中编译</p><p>  API 应用程序接口是一些预先定义的接口（如函数、HTTP接口），或指软件系统不同组成部分衔接的约定。用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程，而又无需访问源码，或理解内部工作机制的细节。</p></li></ul><p>系统调用system call和函数库 Library function</p><h3 id="2-3-各种操作系统"><a href="#2-3-各种操作系统" class="headerlink" title="2.3 各种操作系统"></a>2.3 各种操作系统</h3><h4 id="2-3-1-操作系统演变"><a href="#2-3-1-操作系统演变" class="headerlink" title="2.3.1 操作系统演变"></a>2.3.1 操作系统演变</h4><ul><li>单用户系统：一次只能支持一个用户程序的运行。向用户提供联机交互式的工作环境，如：DOS </li><li>批处理系统：用户将一批作业提交给操作系统后就不再交互，由操作系统控制自动运行，提高系统运行效率</li><li>多道程序系统：可以运行多个程序,由程序控制 CPU 处理顺序</li><li>分时系统：操作系统控制 CPU 处理顺序，多个人共用一台计算机,提高系统利用率和系统安全 </li><li>个人计算机：每人用户对应一个系统，廉价，方便，易用</li><li>分布式计算：每个用户对应多个系统，云计算，大数据处理</li></ul><h4 id="2-3-2-服务器三大操作系统"><a href="#2-3-2-服务器三大操作系统" class="headerlink" title="2.3.2 服务器三大操作系统"></a>2.3.2 服务器三大操作系统</h4><ul><li>Multics 分时多任务操作系统 由CTSS分时系统而来 GE-645</li><li>Unix 非复用信息和科学计算机服务，一种多用户，多进程的计算机操作系统<ul><li>System: Bell Lab<ul><li>AIX （IBM） </li><li>Solaris (SUN) </li><li>HP-UX (HP)</li></ul></li><li>BSD: （BSRG）Berkeley System Distribution<ul><li>NetBSD </li><li>OpenBSD</li><li>FreeBSD</li></ul></li></ul></li><li>GNU&#x2F;Linux</li><li>Windows</li></ul><h3 id="2-4-GNU"><a href="#2-4-GNU" class="headerlink" title="2.4  GNU"></a>2.4  GNU</h3><ul><li>GNU：GNU is Not Unix</li><li>GPL：GNU General Public License</li><li>自由软件基金会：Free Software Foundation</li><li>开源 Open Source</li></ul><p>范例: 查看软件的发行许可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -qi openssh<br>rpm -qi kernel<br></code></pre></td></tr></table></figure><h3 id="2-5-Linux"><a href="#2-5-Linux" class="headerlink" title="2.5 Linux"></a>2.5 Linux</h3><pre><code class="hljs">Linux内核+ GNU工具=Linux/GNU</code></pre><p>Linux的内核版本组成 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>3.10.0-693.2.2.el7.x86_64<br></code></pre></td></tr></table></figure><ul><li>主版本号 3</li><li>次版本号 10</li><li>末版本号 0</li><li>打包版本号 693</li><li>厂商版本 el7</li></ul><p>Linux 发行版</p><ul><li>slackware：SUSE Linux Enterprise Server (SLES) , OpenSuse桌面 </li><li>debian:   ubuntu，deepin（深度），mint</li><li>redhat：  <ul><li>RHEL: RedHat Enterprise Linux, 每18个月发行一个新版本</li><li>CentOS：  Community Enterprise Operating System 兼容RHEL的格式</li><li>中标麒麟：中标软件</li><li>Fedora：每6个月发行一个新版本</li></ul></li><li>Alpine：  一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musllibc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，只有5M左右大小</li><li>ArchLinux：轻量简洁，遵循K.I.S.S.原则（ keep it simple and stupid ），Manjaro </li><li>Gentoo：极致性能，不提供传统意义的安装程序，下载源代码在本机上编译安装软件 </li><li>LFS：Linux From scratch 自制Linux，只是一个说明书</li><li>Android：kernel+busybox（工具集）+java虚拟机</li></ul><p>Rocky Linux</p><pre><code class="hljs">rockylinux.org</code></pre><h3 id="2-6-UNIX哲学思想"><a href="#2-6-UNIX哲学思想" class="headerlink" title="2.6 UNIX哲学思想"></a>2.6 UNIX哲学思想</h3><ul><li>一切都是一个文件（包括硬件） </li><li>小型，单一用途的程序</li><li>链接程序，共同完成复杂的任务（shell脚本) </li><li>避免令人困惑的用户界面</li><li>配置数据存储在文本中</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/07/hello-world/"/>
    <url>/2022/06/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
